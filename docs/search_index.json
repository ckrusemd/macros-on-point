[["index.html", "1 Macros on Point", " 1 Macros on Point Based on the Danish DTU Frida database of nutritional content, this is a bookdown that applies linear programming through the lpSolveAPI to optimize a diet program based on constraints. I have used it myself for bulking and cutting weigt in weightlifting, and it could definitely serve other purposes in plant based diets, keto diets etc, if you’re willing to contribute with a pull request (or I’ll do it later on). You will need to register at DTU Frida to gain access to the dataset. Here’s a quick guide: 1. Visit [FRIDA at DTU](https://frida.fooddata.dk/data?) 2. Provide your **Full name** and **e-mail address** 3. Await an e-mail in your inbox with a download link. The download link will look something like **https://frida.fooddata.dk/data/download/.../...** 4. Leave the zip-file in the data directory of the repo once you&#39;ve cloned/downloaded it. "],["example-cut-diet.html", "2 Example: Cut Diet 2.1 Load data 2.2 Display example data table 2.3 Clean data table 2.4 Tidy Data 2.5 Spread data 2.6 Settings 2.7 Functions 2.8 Optimization algorithm 2.9 Results 2.10 Total 2.11 Per Day 2.12 Per Kg Per Day 2.13 Necessary steps per day", " 2 Example: Cut Diet Source (Danish) Fødevaredata (http://frida.fooddata.dk), version 4, 2019 Fødevareinstituttet, Danmarks Tekniske Universitet Source (English) Food data (http://frida.fooddata.dk), version 4, 2019 The Food Institute, Technical University of Denmark 2.1 Load data temp_dir = tempdir() temp_dir ## [1] &quot;/tmp/RtmpcyYylH&quot; path = &quot;/home/oem/Dropbox/R/macros-on-point/data&quot; file_path = paste0(path , &quot;/&quot; , list.files(path = path) ) file_path ## [1] &quot;/home/oem/Dropbox/R/macros-on-point/data/Frida20190802.zip&quot; unzip(file_path,exdir = tempdir()) list.files(tempdir()) ## [1] &quot;file54fd7cac0b53&quot; &quot;Frida20190802dav3.ods&quot; &quot;Frida20190802dav3.xlsx&quot; ## [4] &quot;Frida20190802env3.ods&quot; &quot;Frida20190802env3.xlsx&quot; 2.2 Display example data table english_file = &quot;Frida20190802env3.xlsx&quot; sheet_name = &quot;Frida_20190802&quot; df = openxlsx::read.xlsx(xlsxFile = paste0(tempdir(),&quot;/&quot;,english_file),sheet=sheet_name) df %&gt;% head() %&gt;% DT::datatable(options = list(scrollX = TRUE)) 2.3 Clean data table df_clean = df %&gt;% slice(2:nrow(.)) %&gt;% dplyr::select(-X1) %&gt;% dplyr::rename(Group=X2, Name=X3) df_clean %&gt;% head() %&gt;% DT::datatable(options = list(scrollX = TRUE)) 2.4 Tidy Data df_basic_tidy = df_clean %&gt;% dplyr::select(Group, Name, `Energy,.kcal`, `Protein,.videnskabelig`, `Carbohydrate,.declaration`, `Dietary.fiber`, `Fat,.total`, Alcohol) %&gt;% setNames(.,c(&quot;Group&quot;,&quot;Name&quot;,&quot;Kcal&quot;,&quot;Protein&quot;,&quot;Carbohydrates&quot;,&quot;Fiber&quot;,&quot;Fat&quot;,&quot;Alcohol&quot;)) %&gt;% group_by(Group,Name) %&gt;% filter(n()==1) %&gt;% ungroup() %&gt;% gather(Metric,Value,Kcal:Alcohol) %&gt;% dplyr::mutate(Value=as.numeric(Value)) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion df_basic_tidy %&gt;% head() %&gt;% DT::datatable(options = list(scrollX = TRUE)) 2.5 Spread data df_basic = df_basic_tidy %&gt;% spread(Metric,Value) df_basic %&gt;% head() %&gt;% DT::datatable(options = list(scrollX = TRUE)) 2.6 Settings 2.7 Functions 2.8 Optimization algorithm 2.9 Results 2.10 Total 2.11 Per Day 2.12 Per Kg Per Day 2.13 Necessary steps per day You have requested a calorie deficit of 500. Your BMR is 1861.25. Your calorie intake will be 1192. You don’t need to walk extra to reach this deficit.. "]]
